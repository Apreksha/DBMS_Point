import 'package:flutter/material.dart';

class Data {
  Map subTopics = {
    'What is DBMS?': RichText(text: TextSpan(text: 'What is DBMS?\n',
        style: TextStyle(color: Colors.black, fontSize: 20),
        children: <TextSpan>[
          TextSpan(text: 'Data: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'Data are factual information used for reasoning, discussion or calculation.\n\n'),
          TextSpan(text: 'Database: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'Database is an organised and managed collection of data.\n\n'),
          TextSpan(text: 'Database Management System: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'A collection of interrelated data and a set of programs and procedures to provide mechanisms for storage, access, manipulation and safety of data.')
        ])),

    'Advantages of DBMS': Text(
      'Advantages of DBMS are:\n1. It reduces data redundancy.\n\n2. It allows sharing of data.\n\n3. It ensures'
          ' data integrity.\n\n4. It provides data security.\n\n5. It ensures consistency of data.\n\n6. There is a backup recovery of data',
      style: TextStyle(fontSize: 20),),

    'Queries in DBMS': Text(
        'Querying is a technique to interact with the database. For querying to database, a query language is required like MySQL. There are types '
            'of statements in the query language which are used to perform a specific task.\nFor example: DDL statements define the schema',
        style: TextStyle(fontSize: 20)),

    'Query Processor': RichText(text: TextSpan(
        text: 'A component of database architecture which processes a query coming from one of the database users. It has three components:\n\n',
        style: TextStyle(color: Colors.black, fontSize: 20),
        children: [
          TextSpan(text: '1. DDL Interpreter: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(text: 'It interprets Data Definition Language statements '
              'and records the definitions in data dictionary containing metadata(data about data).\n\n'),
          TextSpan(text: '2. DML Compiler: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(text: 'It translates Data Manipulation Language statements '
              'in a query language into an evaluation plan consisting of low level instructions that query elevation engine understands.\n\n'),
          TextSpan(text: '3. Query Evaluation Engine: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It executes low level instructions generated by DML compiler.')
        ]),),

    'Storage Manager': RichText(text: TextSpan(
        text: 'It is a program module responsible for providing interface between query coming from query processor and data stored in disk.'
            ' Since the data is stored in disk with the help of file system so the storage manager translates various DML statements into low level file system commands.\n\n',
        style: TextStyle(color: Colors.black, fontSize: 20),
        children: [
          TextSpan(text: '1. File Manager: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It manages space on disk and for deciding the storage structure and the '
                  'and the data structures to store data).\n\n'),
          TextSpan(text: '2. Buffer Manager: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is responsible for fetching data from disk storage into main memory and '
                  'deciding what data to cache in main memory.\n\n'),
          TextSpan(text: '3. Transaction Manager: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It monitors transaction that runs on a particular time. It ensures that the database '
                  'remains in a consistent state despite system failures and that concurrent transaction executions proceed without conflicting.\n\n'),
          TextSpan(text: '4. Authorisation and Integrity Manager: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It tests for the transaction of integrity constraints and checks the authority of users to access data.')
        ]),),

    'Disk Storage': RichText(text: TextSpan(
        text: 'It contains data itself and the metadata (data about data). It consists of:\n\n',
        style: TextStyle(color: Colors.black, fontSize: 20),
        children: [
          TextSpan(text: '1. Data Files: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'They are the main storage which stores the database itself.\n\n'),
          TextSpan(text: '2. Data Dictionary: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It stores metadata about the structure of the database (schema of the database).\n\n'),
          TextSpan(text: '3. Indices: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(text: 'It can provide fast access to data items.')
        ]),),

    'Data Abstraction': Text(
        'Database system provides its users an abstract view of data that is system hides the internal implementation, structure and type of data from the users for providing the feature of simple and easy interfacing.',
        style: TextStyle(fontSize: 20)),
    'Data Independence': RichText(text: TextSpan(
        text: 'It is the power to change the schema at one level without getting one level schema affected. If we make changes in schema at any one level (logical or physical level), there is no need to make changes at other level schema.\n\n',
        style: TextStyle(color: Colors.black, fontSize: 20),
        children: [
          TextSpan(text: 'Logical Data Independence: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'Power to change the logical schema without having any need to make changes in external schema, ie, if we change any structure of data at logical level then we do not need to change the external structure\n\n'),
          TextSpan(text: 'Physical Data Independence: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'Power to change the physical level schema without having needs to make changes at logical level schema, ie, if we change data structure of data at physical level then we do not need to change the logical schema. Mapping between logical and physcial level needs to be changed.'),
        ])),

    'Data Model': RichText(text: TextSpan(
        text: 'It tells about how data is structured. It is a collection of logical tools which describe data, relationship among data and the constraint associated with those data.\n\n',
        style: TextStyle(color: Colors.black, fontSize: 20),
        children: [
          TextSpan(text: '1. Hierarchial Data Model: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'Data is organised in a tree form. It represents information through parent-child relationship, child can have only one parent and a parent can have many children. This relationship is called 1:N (1 to Many).\n\n'),
          TextSpan(text: '2. Network Data Model: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It allows relationships existed between many parents and many children (M:N).\n\n'),
          TextSpan(text: '3. Relational Model: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It contains a number of tables (relations). It uses these tables to represent data and relationships among these data.\n\n'),
          TextSpan(text: '4. Entity Relationship Model: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It defines relationships among entities. It is used to define data elements and relationships for a specified system.')
        ]),),
'E-R Model':'',
    'Components of E-R diagram': RichText(text: TextSpan(
        text: 'Components of E-R Diagram are:\n\n',
        style: TextStyle(fontSize: 20, color: Colors.black),
        children: [
          TextSpan(text: '1. Entity:',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'An object, person or place. It is represented by Rectangle.\n'),
          TextSpan(text: '    a. Weak Entity: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It depends on another entity. It does not contain any key attribute of its own. It is represented by a double rectangle.\n\n'),
          TextSpan(text: '2. Attribute: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It describes properties of an entity. It is represented by an Ellipse.\n'),
          TextSpan(text: '   a. Key Attributes: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It represents main characteristics of an entity. It represents a primary key. It is represented by an ellipse with text underlined.\n'),
          TextSpan(text: '    b. Composed Attribute: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'Composed of many other attributes. It is represented by an ellipse and those ellipses are connected with an ellipse.\n'),
          TextSpan(text: '    c. Multivalued Attribute: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It can have more than one value. It is represented by a double oval.\n\n'),
          TextSpan(text: '3. Relationship: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is used to describe relation between entities. It is represented by diamond or rhombus.\n'),
          TextSpan(text: '   a. One to One Relationship: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'When only instance of an entity is associated with relationship. For example: One female can marry to one male and vice versa.\n'),
          TextSpan(text: '    b. One to Many Relationsip: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'When only one instance of entity on left and more than one instance of an entity on right associates with relationship. For example: Scientist can invent many inventions but invention is done by only specific scientist.\n'),
          TextSpan(text: '    c. Many To One Relationship: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'When more than one instance of entity on left and only instance of an entity on right associates with relationship.\n'),
          TextSpan(text: '    d. Many To Many Relationship: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'When more than one instance of entity on left and more than one instance of entity on right associates with relationship. '
                  'For example: Employee can assign by many projects and project can have many employess.\n')
        ])),

    'Keys in DBMS': RichText(text: TextSpan(
        text: 'It is an attribute or a set of attributes that help in uniquely identifying any record (tuple) in a relation. It is used to establish and identity relationships between tables. It has 7 types: \n\n',
        style: TextStyle(fontSize: 20, color: Colors.black),
        children: [
          TextSpan(text: '1. Primary Key: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'A column of a table that identify every record present in the table uniquely. There can be only one primary key in a table. It has unique and not NULL values. Any value in primary key cannot be changed by any foreign keys which refer to it.\n\n'),
          TextSpan(text: '2. Super Key: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'A set of all columns that are capable of identifying the other columns of that table uniquely will be considered super keys. It is the superset of a candidate key. Primary key is picked from super key set.\n\n'),
          TextSpan(text: '3. Candidate Key: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'Those attributes that uniquely identify rows of a table. Primary key is selected from one of the candidate keys. There can be more than one candidate keys in a table. They have same properties as primary key.\n\n'),
          TextSpan(text: '4. Alternate Key: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It consists of rest of the keys which did not become a primary key.\n\n'),
          TextSpan(text: '5. Foreign Key: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is used to establish relationship between two tables. It maintains data and referential integrity. It will require each value in a column or a set of columns to match primary key of referential table.\n\n'),
          TextSpan(text: '6. Composite Key: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is a set of two or more than two attributes that identify each tuple in a table uniquely. Attributes in the set may not be unique when considered separately. When all together they will ensures uniqueness.\n\n'),
          TextSpan(text: '7. Unique Key: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'A column or a set of columns of a table that uniquely identify each record present in the table. All values have to be unique. It can only one NULL value.\n\n')
        ])),

    'Key Constraints': RichText(text: TextSpan(
        text: 'Rules that are to be followed while entering data into columns of the database table. It has 5 types: \n\n',
        style: TextStyle(fontSize: 20, color: Colors.black),
        children: [
          TextSpan(text: '1. NOT NULL: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It ensures that specified column does not contains a NULL value. It cannot be applied at table level.\n\n'),
          TextSpan(text: '2. UNIQUE: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It provides a unique values to specified columns.\n\n'),
          TextSpan(text: '3. DEFAULT: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: "It provides a default value to a column if none is specified. Default value can be overriden when inserting data for that row.\nFor example:\nCREATE TABLE EMPLOYEE(\nCity varchar(20) default 'Pune');.\n\n"),
          TextSpan(text: '4. CHECK: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It ensures by user for that column is within range of values or possible values specified.\nFor example\nCREATE TABLE STUDENT(\NAge int,\ncheck(Age>=18)); .\n\n'),
          TextSpan(text: '5. PRIMARY KEY: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It uniquely identifies each row record in a database table by enabling column in the table.\nFor example:\nCREATE TABLE EMPLOYEE(\nID int,\nprimary key(ID));\n\n'),
          TextSpan(text: '6. FOREIGN KEY: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'A column or list of columns which points to primary key column of another table. Only those values are allowed in present table that will match to primary key column of another table.\nFor example:\nCREATE TABLE CUSTOMER1(\nID int,\nprimary key(ID));\nCREATE TABLE CUSTOMER2(\nID int,\nreferences CUSTOMER1(ID));\n\n'),
        ])),

    'Participation Constraints': RichText(text: TextSpan(
        text: 'It specifies the existence of an entity when it is related to another entity in a relationship type. It is also called as minimum cardinality constraint. It has 2 types: \n\n',
        style: TextStyle(fontSize: 20, color: Colors.black),
        children: [
          TextSpan(text: '1. Total Participation: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'Each entity in the entity set is involved in at least one relationship in a relationship set. Number of relationship in every entity is involved is greater than 0.\nFor example:\nEvery employee works in at least one department hence an employee entity exist if it has atleast one relationship with department entity. It is represented by double line in ER diagram.\n\n'),
          TextSpan(text: '2. Partial Participation: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'Each entity in the entity set may or may not occur in at least one relationship in a relationship set.\nFor example:\nAn employee must manage a department but not every employee manages department.\n\n')
        ])),

    'Mapping Constraints': RichText(text: TextSpan(
        text: 'It is also called as Cardinality Ratios. It is a data constraint that tells number of entities to which another entity can be associated through a relationship set. It is useful to describe relationship sets that involve two or more than two entity sets.\n\n',
        style: TextStyle(fontSize: 20, color: Colors.black),
        children: [
          TextSpan(text: '1. One to One(1:1): ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'An entity in entity set E1 is associated with at most one entity in entity set E2 and an entity in entity set E2 is associated with at most one entity in entity set E1.\n\n'),
          TextSpan(text: '2. One to Many(1:M): ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'An entity in entity set E1 is associated with any number of entities in entity in entity set E2 and an entity in entity set E2 is associated with at most one entity in entity set E1.\n\n'),
          TextSpan(text: '3. Many to One(M:1): ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: "An entity in entity set E1 is associated with at most one entity in entity set E2 and an entity in entity set E2 is associated with any number of entities in entity in entity set E1.\n\n"),
          TextSpan(text: '4. Many to Many(M:M): ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'An entity in entity set E1 is associated with any number of entities in entity in entity set E2 and an entity in entity set E2 is associated with any number of entities in entity in entity set E1.\n\n'),
        ])),

    'Weak and Strong Entities': Text(
      'Weak Entity Set is an entity set which is unable to form its primary key on its own ie it has no sufficient attributes to form primary key.\n\nStrong Entity Set is an entity set which has sufficient attributes to form a primary key.\n\nWeak entity set has to depend on a strong entity set for identifications. A partial key or a discriminator is an attribute or a set of attributes in a weak entity set that allows all tuples to be distinguished within that entity '
          'set. It is represented by a dashed line inside an ellipse.',
      style: TextStyle(fontSize: 20),),

    'Generalisation': Text(
        'It is a process of extracting common properties from a set of entities and create a generalised entity from it. It is a bottom up approach in which two or more than two entities can be generalised to a higher level entity if they have some attributes in common.\nFor example: Student and Faculty can be generalised to a higher level entity called Person.',
        style: TextStyle(fontSize: 20)),
    'Specialisation': Text(
        'An entity is divided into sub-entities based on their characteristics. It is a top down approach where higher level entity is specialised into two or more than two lower level entities.\nFor example: Employee entity can be specialised into Developer, Tester, etc.',
        style: TextStyle(fontSize: 20)),
    'Aggregation': Text(
        'It is an abstraction through which we can represent relationships as higher level entity sets. Sometimes an ER diagram is not capable of representing relationships between an entity and a relationship. In these situations, a relationship with its corresponding entities is aggregated into a higher level entity sets.\nFor example: Employee working for a project may require some machinery. Machinery using aggregation, Works_for relationship with its entities Employee and Project is aggregated '
            'into single entity and relationship.',
        style: TextStyle(fontSize: 20)),

    'Degree of Relationship Set': RichText(text: TextSpan(
        text: 'It is the number of different entity sets participating in a relationship set.\n\n',
        style: TextStyle(fontSize: 20, color: Colors.black),
        children: [
          TextSpan(text: '1. Unary Relationship: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'There is only one entity set participating in a relation.\nFor example: One person is married to only one person.\n\n'),
          TextSpan(text: '2. Binary Relationship: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'When there are two entity sets participating in a relation.\nFor example: Student is enrolled in a course.\n\n'),
          TextSpan(text: '3. n-ary Relationship: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'When there are n entity sets participating in a relation.\n\n'),
        ])),

    'Entity Sets vs Attributes': Text(
      'Suppose Person is an entity set with attributes name and income. Now, income can be declared as an entity set having attributes like amount, income_source,etc. If income is treated as an attribute then we assume that there is only one source of income. But if a person have many sources of income then income can either be an entity set or a multivalued attribute. So to use an object like an entity set or like an '
          'attribute depends upon the scenario where we have to model it. If we are sure that all the person can have only one income source then income is an attribute but if the person can have multiple sources of income then income is an entity set.',
      style: TextStyle(fontSize: 20),),

    'Entity sets vs Relationship': Text(
      'Suppose two entity sets Businessman and Company related via a relationship set. Company can be shown as a relationship set and has its own attributes. If a company is owned by one businessman then company can be represented by a relationship set but if a company is owned by number of businessmen then company must be represented by an entity set. An object should be represented by a relationship set if it describes an action that occurs between entities',
      style: TextStyle(fontSize: 20),),

    'Binary vs n-ary Relationship': Text(
      'Suppose a ternary relationship set teaches with entity sets teacher, subject and branch. If broke into two binary relationship sets then its benefit is that if we do not have values of branch(attribute) even then we can have a record of teacher and his subject otherwise in ternary relationship we would have put a null value under attribute branch.',
      style: TextStyle(fontSize: 20),),

    'Relational Algebra': Text(
      'A procedural query language which take instances of relations as input and yield instances of relations as output. It uses operators to perform queries. Operator can either be binary or unary. They accept relations as input and yeild relations as their output. Recursive algebra is performed recursively on a relation and intermediate results are also considered relations. It has some fundamental operations.',
      style: TextStyle(fontSize: 20),),
    'Select Operation': Text(
      'It is used to select tuples that satisfies a given condition or predicate. It is a unary operation. ',
      style: TextStyle(fontSize: 20),),
    'Project Operation': Text(
      'Select operation projects all the columns of the table. Project operation projects column(s) that satisfy a given predicate. It is an unary operation',
      style: TextStyle(fontSize: 20),),
    'Union Operation': Text(
      'A binary operation which works on two sets(tables). It is used when we have to combine data from two tables. For example, there are two sets R and S then union contains all tuples that are either in R or S or in both. It eliminates duplicate tuples. R and S must have same number of attributes.',
      style: TextStyle(fontSize: 20),),
    'Set Intersection Operation': Text(
      'It finds common values in two tables. It is a binary operation.',
      style: TextStyle(fontSize: 20),),
    'Set Difference Operation': Text(
      'It gives tuples that are present in one relation but not in other. It is a binary operation. Both relations have same number and same data types of attributes.',
      style: TextStyle(fontSize: 20),),
    'Cartesian Product': Text(
      ' It combines each row in one table with each row in other table. It is a binary operation.',
      style: TextStyle(fontSize: 20),),
    'Rename Operation': Text(
      'It allows us to give name to results produced from some expression. Results of relational algebra are also relations but without any name.',
      style: TextStyle(fontSize: 20),),
    'Division Operation': Text(
      'Divison operation can be applies if and only if\n1. Attributes of B is a proper subset of attributes of A\n2. Relation returned will have attributes = (all attributes of A - all attributes of B)\n3. Relation returned will return those tuples from relation A which are associated to every tuple of B.',
      style: TextStyle(fontSize: 20),),
    'Assignment Operation': Text(
      'It assign long expressions to temporary variables that can be used in various places. It provides simplicity in writing and using long expressions. Right side expression is assigned to left side variable',
      style: TextStyle(fontSize: 20),),
    'Generalised Projection': Text(
      'It is an extended operation. It is an extension to projection operation. Arithmetic functions can be used in projection list on certain attributes.',
      style: TextStyle(fontSize: 20),),
    'Aggregate Function': Text(
      'It is an extended operation. It takes multiple values as input and produces a single valued output. There are 5 functions: Sum, Average(avg), Count, Minimum(min) and Maximum(max). It is denoted by G.\nIn collection of values, if all elements are distinct then it is called a set otherwise called a multiset.',
      style: TextStyle(fontSize: 20),),

    'Join Operation': RichText(text: TextSpan(
        text: 'It combines related tuples from different relations if and only if a given join condition is satisfied.\n\n',
        style: TextStyle(fontSize: 20, color: Colors.black),
        children: [
          TextSpan(text: '1. Natural Join: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is an extension of join operation. It allows us to deal with missing information.\n\n'),
          TextSpan(text: '2. Outer Join: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is a set of tuples of all combinations in R and S that are equal on their common attribute names. It allows us to combine certain selections and a cartesian product into one operation.\n\n'),
          TextSpan(text: '   a. Left Outer Join: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It takes all tuples from left table and puts null values under those corresponding attributes in right table for which values are missing. It means all information from left table will appear surely in resultant table.\n'),
          TextSpan(text: '   b. Right Outer Join: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It takes all tuples from right table and puts null values under those corresponding attributes in left table for which values are missing. It means all information from right table will appear surely in resultant table.\n'),
          TextSpan(text: '   c. Full Outer Join: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It takes all tuples from left and right table and puts null values wherever information is missing. It is a combination of left and right outer join. All information in resultant table is preserved and no information loss occurs.\n\n'),
          TextSpan(text: '3. Conditional Join: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is a set of tuples of all combinations in R and S that are equal on their common attribute names. It allows us to combine certain selections and a cartesian product into one operation.\n\n'),
          TextSpan(text: '4. Equi Join: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is used when you want to join two or more relations based on come conditions.'),
        ]),),

    'Modification in Database': RichText(text: TextSpan(
        text: 'It includes deletion, insertion and updation. These modifications are made in actual database using assignment operations with arithmetic operators.\n\n',
        style: TextStyle(fontSize: 20, color: Colors.black),
        children: [
          TextSpan(text: '1. Deletion Operation: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(text: 'It works opposite of insertion opertaion.\n\n'),
          TextSpan(text: '2. Insertion Operation: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It works opposite of deletion opertaion. While inserting of tuples, remember\na. tuples which are being inserted must have same number of attributes as that in table.\nb.domains of corresponding attributes must be same.\n\n'),
          TextSpan(text: '3. Updation Operation: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It leads to changes in values of a tuple in a relation. In case of changing all values in a tuple, simply delete that tuple and insert a new one. Generalised projection is used for this opertaion.'),
        ]),),

    'Relational Calculus': Text(
        'It is a non-procedural language which tells what to do not how to do it. It involves some conditions or predicates that result must satisfy. SQL is also a non procedural language.\nFor example: teacher(name, age)\nExpression teacher (a,b) is a predicate which is true if a row with values a,b exists in the table teacher. It has two types:',
        style: TextStyle(fontSize: 20)),
    'Tuple Relational Calculus': Text(
        'It provides only the description of the query but it does not provide the methods to solve it. Result of the relation can have one or more tuples. It is based on the tuple variable(t) concept. t is said to range over some table R if the only values that t can take are tuples in table R. A row has its indexed form t.A where t is the tuple variable and A is an attribute for retrieving rows that meet a given condition.\nFormat of queries is\n(t|p(t))\nretrieves those values of tuple variable t that satisfies predicate p(t)',
        style: TextStyle(fontSize: 20)),
    'Domain Relational Calculus': Text(
        'The variables range over single domain of attributes. It uses same operators as tuple calculus. It uses logical connectors and, or and not. It uses universal and essential quantifiers to bind the variable. To specify a relation made up of n attributes, it is necessary to specify n domain variables for each attribute.',
        style: TextStyle(fontSize: 20)),

    'RC and RA comparison': RichText(text: TextSpan(
        text: 'Relational calculus is superior than relational algebra.\n\n',
        style: TextStyle(fontSize: 20, color: Colors.black),
        children: [
          TextSpan(text: '1. Authorisation capability: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'Since relational calculus is easy to extend and optimise, it is easier to specify authorisation.\n\n'),
          TextSpan(text: '2. Scope for search optimisation: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'Queries are simpler in relational calculus than relational algebra so it is easy for database system to optimise database search.\n\n'),
          TextSpan(text: '3. Ease of augmentation / Ease of extensibility: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'More power (providing facility to invoke number of library functions like sum, max, etc) can be provided in relational calculus than relational algebra.'),
        ]),),

    'SQL': RichText(text: TextSpan(
        text: 'SQL stands for Structured Query Language (pronounced as Sequel). It allows us to interact with database and provides functionality of retrieving, updating and deleting database and applying security '
            'and integrity constraints as well. SQL is made up of:\n\n',
        style: TextStyle(color: Colors.black, fontSize: 20),
        children: <TextSpan>[
          TextSpan(text: '1. Data Manipulation Language(DML): ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'These commands allow us to insert, delete and modify tuples in a database.\n\n'),
          TextSpan(text: '2. Data Definition Language(DDL): ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'These commands allow us to define, delete and modify the schema.\n\n'),
          TextSpan(text: '3. Transaction Control Language(TCL): ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'These commands allow a user to control the transactions.\n\n'),
          TextSpan(text: '4. Integrity Constraints Commands: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is a part of DDL commands that allow us to specify integrity constraints.\n\n'),
          TextSpan(text: '5. Authorisation and Security: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'These DDl commands allow a user to specify level of rights to access and modify database.\n\n'),
        ])),

    'SQL Data Types': RichText(text: TextSpan(
        text: 'Some of the data types are:\n\n',
        style: TextStyle(fontSize: 20, color: Colors.black),
        children: [
          TextSpan(text: '1. char(n) or character(n): ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is a fixed length character string with user specified length n.\nFor example: Name char(18)\nName occupies 18 character space in memory. If total space is not used then the left over space is padded with spaces and not released from memory. It leads to wastage of memory but it is fast in execution compared to varchar.\n\n'),
          TextSpan(text: '2. varchar(n): ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is a variable length character string with user specified length n. If total space is not used then the left is released from memory. It saves wastage memory but it is slower in execution compared to char.\n\n'),
          TextSpan(text: '3. int/integer: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(text: 'Integer whose range is machine dependent.\n\n'),
          TextSpan(text: '4. float(n): ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'Floating point number with at least n digits of precision.\n\n'),
          TextSpan(
              text: '5. date: ', style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(text: 'For date values like (2012-02-07)\n\n'),
          TextSpan(
              text: '6. time: ', style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(text: 'For time values like (10:33:33)\n\n'),
          TextSpan(text: '7. timestamp: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is a combination of date and time values (2012-02-07 10:33:33)\n\n'),
          TextSpan(text: '8. timez: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(text: 'It is the time with time zone.\n\n'),
        ])),

    'SQL Commands': Text(
      'They are instructions. It is used to communicate with database. It is used to perform specific tasks, functions and queries of data. It has 5 types shown in the next slide.',
      style: TextStyle(fontSize: 20),),

    'Data Definition Language': RichText(text: TextSpan(
        text: 'DDL changes the structure of the table like table creation, deletion, alteration, etc. All commands are auto-committed ie it permanently save the changes in database. Commands are:\n\n',
        style: TextStyle(fontSize: 20, color: Colors.black),
        children: [
          TextSpan(text: '1. CREATE: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is used to create a new table in the database.\nSyntax:\nCREATE TABLE TABLE_NAME(COLUMN_NAME DATATYPE[...]);\n\n'),
          TextSpan(
              text: '2. DROP: ', style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is used to delete both structure and record stored in the table.\nSyntax:\nDROP TABLE TABLE_NAME;\n\n'),
          TextSpan(text: '3. ALTER: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is used to alter structure of the database. This could modify characteristics of an existing attribute or to add a new attribute.\nSyntax:\nALTER TABLE TABLE_NAME ADD COLUMN_NAME COLUMN_DEFINITION\nor\nALTER TABLE TABLE_NAME MODIFY(COLUMN_DEFINITIONS);\n\n'),
          TextSpan(text: '4. TRUNCATE: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is used to delete all rows from table and free space containing the table.\nSyntax:\nTRUNCATE TABLE TABLE_NAME;\n\n'),
          TextSpan(
              text: '5. DESC: ', style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is used to show structure of the database.\nSyntax:\nDESC TABLE_NAME;'),
        ])),

    'Data Manipulation Language': RichText(text: TextSpan(
        text: 'DML is used to modify database. It is responsible for all form of changes in the database. It is not auto-committed that means it cannot permanently save all changes in the database. They can rollback. Commands are:\n\n',
        style: TextStyle(fontSize: 20, color: Colors.black),
        children: [
          TextSpan(text: '1. INSERT: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is used to insert data into row of table.\nSyntax:\nINSERT INTO TABLE_NAME(COLUMN_NAME[..]) VALUES(VALUE1,VALUE2,...VALUEN);\nor\nINSERT INTO TABLE_NAME VALUES(VALUE1,VALUE2,..VALUEN);\n\n'),
          TextSpan(text: '2. UPDATE: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is used to update or modify value of a column in the table.\nSyntax:\nUPDATE TABLE_NAME SET [COLUMN_NAME1=VALUE1,..COLUMN_NAME2=VALUEN] WHERE CONDITION;\n\n'),
          TextSpan(text: '3. DELETE: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is used to remove one or more rows from a table.\nSyntax:\nDELETE FROM TABLE_NAME WHERE CONDITION;\n\n'),
        ])),

    'Data Control Language': RichText(text: TextSpan(
        text: 'DCL is used to grant and take back authority from any database user. Commands are:\n\n',
        style: TextStyle(fontSize: 20, color: Colors.black),
        children: [
          TextSpan(text: '1. GRANT: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is used to give user access privileges to a database.\n\n'),
          TextSpan(text: '2. REVOKE: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is used to take back permission from the user.\n\n'),
        ])),

    'Transaction Control Language': RichText(text: TextSpan(
        text: 'TCL can be used with the DML commands are insert, delete and update. These are automatically committed in the database hence cannot be used while creating or dropping tables. Commands are:\n\n',
        style: TextStyle(fontSize: 20, color: Colors.black),
        children: [
          TextSpan(text: '1. COMMIT: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is used to save all the transactions to the database.\nSyntax:\nCOMMIT;\n\n'),
          TextSpan(text: '2. ROLLBACK: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is used to undo the transactions that have not already been saved to the database.\nSyntax:\nROLLBACK;\n\n'),
          TextSpan(text: '3. SAVEPOINT: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is used to roll transaction back to a certain point without rolling back the entire transaction. It temporarily save a transaction so that you can rollback to that point whenever required.\nSyntax:\nSAVEPOINT SAVEPOINT_NAME;\n\n'),
        ])),

    'Data Query Language': RichText(text: TextSpan(
        text: 'It is used to fetch data from database. Command is:\n\n',
        style: TextStyle(fontSize: 20, color: Colors.black),
        children: [
          TextSpan(text: '1. SELECT: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It is same as projection operation in relational algebra. It is used to select attribute based on condition described by where clause.\nSyntax:\nSELECT COLUMN_NAMES FROM TABLE_NAME WHERE CONDITION;\nor\nSELECT * FROM TABLE_NAME;\n\n'),
        ])),

    'Arithmetic Expressions': Text(
      'In select clause, arithmetic operators can be used. They can be used with column names, constant numeric values, numbers and dates.',
      style: TextStyle(fontSize: 20),),
    'Row Selection': Text(
      'WHERE clause allows us to retrieve specific data to our requirement.',
      style: TextStyle(fontSize: 20),),

    'Comparison Operators': RichText(text: TextSpan(
        text: 'Comparison operators are:\n\n',
        style: TextStyle(fontSize: 20, color: Colors.black),
        children: [
          TextSpan(text: '1. Range Test (BETWEEN..AND): ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It checks whether a data value lies between two specified values. Both the end points of the range are inclusive. Specify lower limit first.\nIts opposite version is (NOT BETWEEN...AND)\n\n'),
          TextSpan(text: '2. Set Membership (IN): ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It checks whether a data value matches with one of the value specified in the list.\nIts opposite version is (NOT IN);\n\n'),
          TextSpan(text: '3. Pattern Matching Test (LIKE): ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It checks if a data value in a column matches specified pattern. It may include one or more wild characters.\n% - denotes 0 or many characters\n_ - denotes exactly one character;\n\n'),
          TextSpan(text: '4. Escape Characters: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'If wildcard characters are present in string then we use \$ before(_ or %).\n\n'),
          TextSpan(text: '5. Null value Test (IS NULL): ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It checks whether a column contains a null value in one of its cell.\nIts opposite version is (IS NOT NULL)')
        ])),

    'Logical Operators': RichText(text: TextSpan(
        text: 'It combines result two conditions to produce a single result. If result is true, the row is returned. Operators are:\n\n',
        style: TextStyle(color: Colors.black, fontSize: 20),
        children: [
          TextSpan(
              text: '1. AND: ', style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(text: 'Returns true if both conditions are true.\n'),
          TextSpan(
              text: '2. OR: ', style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(text: 'Returns true if either condition is true.\n'),
          TextSpan(
              text: '3. NOT: ', style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'Returns true if the following conditions is false.\n'),
        ])),

    'Sorting of Results': Text(
      'It is used to show result in some order like alphabetical or ascending order, etc.\nBy default, sorting happens in ascending order.\nASC - ascending order\nDESC - descending order',
      style: TextStyle(fontSize: 20),),

    'Set Operations': RichText(text: TextSpan(
        text: 'Tuples on which the set operations are getting operated must be compatible ie they must have same set of attributes.\n\n',
        style: TextStyle(color: Colors.black, fontSize: 20),
        children: [
          TextSpan(text: '1. UNION: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It takes union of the tables ie it includes values from all the tables eliminating the duplicate ones. If want duplicate values to be shown then use UNION ALL.\n\n'),
          TextSpan(text: '2. INTERSECTION: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It takes intersection of the tables ie it includes common values from all the tables eliminating the duplicate ones. If want duplicate values to be shown then use INTERSECT ALL.\n\n'),
          TextSpan(text: '3. EXCEPT: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'Returns rows present in first table and not in second table eliminating the duplicate ones. If want duplicate values to be shown then use EXCEPT ALL'),
        ])),

    'Aggregate Functions': Text(
      'Functions that take a collection of values as input and produces a single valued output. Functions are:\na.Average(avg)\nb.Minimum(min)\nc.Maximum(max)\nd.Count(count)\ne.Sum(sum)\n\nInput for avg and sum must be a collection of numeric values while other operators can be operated with non-numeric values also.',
      style: TextStyle(fontSize: 20),),

    'Single Row Functions': RichText(text: TextSpan(
        text: 'It takes single value as an input and produces a single valued output.\n\n',
        style: TextStyle(color: Colors.black, fontSize: 20),
        children: [
          TextSpan(text: '1. Group by clause: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It takes union of the tables ie it includes values from all the tables eliminating the duplicate ones. If want duplicate values to be shown then use UNION ALL.\n\n'),
          TextSpan(text: '2. CEIL(Ceiling): ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It produces smallest whole number that is greater than or equal to the specified number.\nSyntax:CEIL(value)\n\n'),
          TextSpan(text: '3. FLOOR: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It produces greatest whole number that is smaller than or equal to the specified number.\nSyntax:FLOOR(value)\n\n'),
          TextSpan(text: '4. Power: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It produces power of the given value.\nPOWER(value,exponent)\n\n'),
          TextSpan(text: '5. SQRT(Square Root): ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It gives square root of the given value.\nSQRT(value)\n\n'),
          TextSpan(
              text: '6. SIGN: ', style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(text: 'It gives sign of a value.\nSIGN(value)\n\n'),
          TextSpan(text: '7. MOD(Modulus): ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It gives 0 if divisor is a 0 or negative.\nSyntax:MOD(value,divisor)\n\n'),
          TextSpan(text: '8. Trigonometric Functions: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'Trigonometric functions like SIN,COS,TAN,SINH,COSH,TANH\nSyntax: Function(value)'),
        ])),

    'Multi-Row Functions': RichText(text: TextSpan(
        text: 'Multi row functions are:\n\n',
        style: TextStyle(color: Colors.black, fontSize: 20),
        children: [
          TextSpan(text: '1. Group by clause: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'It takes union of the tables ie it includes values from all the tables eliminating the duplicate ones. If want duplicate values to be shown then use UNION ALL.\n\n'),
          TextSpan(text: '2. Having clause: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'When we have to specify some condition so that result has some specific group only then we use Having clause.'),
        ])),

    'Foreign Key': RichText(text: TextSpan(
        text: 'Foreign key is a constraint that provides referential integrity in the database. Referential integrity means two tables are associated with a common field present in both the tables and changes in one table are reflected in other tables also. It imposes constraints on insertion, deletion and updation of tuples.\nTable with foreign key (parent or master table) is dependent on other table (child table).\nSyntax\n'
            'CREATE TABLE BRANCH (BRANCH_CODE CHAR(6),\nBRANCH_NAME CHAR(10),\nPRIMARY KEY (BRANCH_CODE));\nCREATE TABLE EMP(EMP_ID CHAR(6) PRIMARY KEY,\nBRANCH_CODE CHAR(6)\nFOREIGN KEY (BRANCH_CODE) REFERENCES BRANCH (BRANCH_CODE));\n\nRelaxation on constraints is possible:\n',
        style: TextStyle(color: Colors.black, fontSize: 20),
        children: [
          TextSpan(text: '1. On delete cascade rule: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'When a parent row is deleted, all the corresponding child rows will be automatically deleted from child table.\nCONSTRAINT WORKS FOREIGN KEY(CODE) REFERENCES BRANCH(CODE) ON DELETE_CASCADE;'),
          TextSpan(text: '2. On delete set null rule: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'When a parent row is deleted, foreign key values in all of its child rows are automatically set to null.\nCONSTRAINT WORKS FOREIGN KEY(CODE) REFERENCES BRANCH(CODE) ON DELETE SET NULL;\n\n'),
          TextSpan(text: '3. On delete set default rule: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'When a parent row is deleted, foreign key values in all of its child rows are automatically set to default value for that specific column. Default value is specified at the time of creation of column.\nCONSTRAINT WORKS FOREIGN KEY(CODE) REFERENCES BRANCH(CODE) ON DELETE SET DEFAULT;\n\n'),
          TextSpan(text: '4. On update cascade: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'If value of primary key is updated in parent table, values in corresponding child rows are changed automatically to match new value of primary key.\n\n'),
          TextSpan(text: '5. On update set null: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'When a parent row primary key is updated, values in corresponding child rows are set to null automatically.\n\n'),
          TextSpan(text: '6. On update set default: ',
              style: TextStyle(fontWeight: FontWeight.bold)),
          TextSpan(
              text: 'When a parent row primary key is updated, values in corresponding child rows are set to default value for that specific column.\n\n'),
        ]),),

    'Nested Queries': RichText(text: TextSpan(
        text: 'Subquery is a query within query. Query containing subquery is known as higher level query. Subquery is evaluated first then is result is fedin higher level query. Generally they appear in where or having clause of SQL query.\nSubquery should always produce a single column of data.\nOrder by clause should not be specifed in subquery since its result is used by main query internally so need for ordering it.\nSELECT * FROM STUDENT WHERE CODE= (SELECT CODE FROM STUDENT WHERE NAME="RAM");\nComparison operators that can be used:=,<>,<=,<,>,>=\n\n',
        style: TextStyle(fontSize: 20, color: Colors.black),
        children: [
          TextSpan(
              text: 'Correlated subqueries has opposite property of nested query-subquery cannot be run independently of outer query. First, a row is processed in outer query then for that particular row, subquery is executed so for each row processed by outer query, subquery will be processed.\nSELECT * FROM EMPLOYEE EMP1 WHERE(1)=(SELECT COUNT(EMP2.SALARY) FROM EMPLOYEE EMP2 WHERE EMP2.SALARY>EMP1.SALARY);')
        ]),),

    'Embedded SQL I': Text(
        'SQL provides two features:\n1.Allows us to write queries.\n2.Allows us to use it in programming languages so that database can be accessed through application programs. There are some special embedded SQL statements used to retrieve data into program. There is a SQL precompiler that accepts combined source code with other programming tools and converts them into an executable program.\n\n1. Host Language in which SQL statements are embedded like C, Java,etc. SQl statements and host language statements make source program which is fed to a SQL precompiler for processing SQL statements.\n\n2. Host languages variables can be referenced in embedded SQL statements allowing values calculated by programs to be used by SQL statements.\n\n',
        style: TextStyle(fontSize: 20)),

    'Embedded SQL II': Text(
        'Embedded SQL program is directly fed to a general purpose programming language compiler. Process is as follows:\n1. Embedded SQL source code is fed to SQL precompiler which scan programs and processes embedded SQL statements present in code.\n2. After processing, precompiler produces two files as output. First file contains source program without embedded SQL statements and second file contains all embedded SQL statements used.\n3. First file is fed to host programming language compiler. Compiler processes source code and produces object code as its output.\nLinker takes object modules produced by compiler and link them with various library routines and produces an executable program.\nDatabase requests modules produced by precompiler are submitted to a special BIND program. '
            'BIND program examines SQL statements, validates them and produces an application plan for each statement.',
        style: TextStyle(fontSize: 20)),

    'Dynamic SQL': Text(
        'SQL statements are not hard coded in the programming language so text of SQL statements is asked at runtime to user. DBMS takes text of SQL statements to execute. After receiving text, DBMS goes through 5 steps of execution.\n\nSQL statement-> Parse statement->Validate statement-> Optimise statement-> Generate application plan->Binary form of SQL statement->Execute application plan',
        style: TextStyle(fontSize: 20)),

    'Views': Text(
        'A single table derived from base (existing) tables. It is a temporary table that does not exist physically and also known as virtual tables. Update operations cannot be applied on views but querying can be done. CREATE VIEW command is used for creating a view.\nSyntax: create view <name of view> <list of attributes optional><query to specify contents of view>;\n\nView can be dropped by DROP VIEW command\nDROP VIEW <view>;',
        style: TextStyle(fontSize: 20)),

    'Cursors': Text(
        'Cursor is a mechanism that allows us to retrieve one row at a time from a set of tuples. First, declare a cursor then next it is opened ie, cursor is positioned right before first row among rows. Rows are fetched one by one and cursor moves to next row after previous row is fetched. Once all rows are fetched, cursor is closed.\nDECLARE CUR CURSOR FOR SELECT NAME FROM STUDENT WHERE MARKS>:C;\nHost variable c holds value of marks specified by user in application program.',
        style: TextStyle(fontSize: 20)),

    'Assertions': Text(
        'A condition that our database should always satisfy. It can be created by using CREATE ASSERTION statement of DDL. Syntax:\nCREATE ASSERTION <ASSERTION_NAME> CHECK<PREDICATE>;',
        style: TextStyle(fontSize: 20)),

    'JDBC and ODBC': Text(
        'Like embedded SQL, ODBC(Open Database Connectivity) & JDBC(Java Database Connectivity) also allow us to integrate SQL with general purpose programming. ODBC & JDBC enables us to access through different DBMS without recompiling the code. An application program tries to connect to a particular DBMS with the help of driver. A driver is a software program that translates ODBC or JDBC calls into DBMS specific calls.',
        style: TextStyle(fontSize: 20)),

    'Active Databases': Text(
        'Database with event monitoring scheme for detecting when certain data is inserted, deleted, updated or selected & automatically executing actions in response when certain events happen & particular conditions are met. Most industrial relational databases nowadays are integrated with active database capabilities (eg. Microsoft SQL server, Oracle, Sybase, Teradata) and all support SQL triggers.',
        style: TextStyle(fontSize: 20)),

    'Schema Refinement': Text(
        'Two things are kept in mind while defining schema:\n1. It should not lead redundancy\n2. It should allow users to access data in easier ways\n\nNormal forms are a series of standards those refines the schema of a database if are adopted. Normal forms are: 1NF, 2NF, 3NF, BCNF, 4NF, 5NF, etc. Higher the number of normal forms more the constraints are applied on schema & more refinement in schema is achieved. Refinement of schema through the series of normal forms is called normalisation. It ensures less redundancy & better structure of a schema.',
        style: TextStyle(fontSize: 20)),

    'Introduction': Text(
        'It tells how two sets of attributes are related to each other or in what way they are dependent on each other. Attributes A & B (can be a column or a group of columns) of table ->B will be functionally dependent of A if and only if there are no more than one value of B is associated to each value of A. A and B can be subset of columns.\nR.A->R.B\nB is functionally dependent on A or A determines B.\nRelationship between A & B can be one to many.',
        style: TextStyle(fontSize: 20)),

    'Full Functional Dependency': Text(
        'For functional dependency X->Y, Y is functionally dependent on X and Y is not functionally dependent on any proper subset of X. If we remove any attribute of X then dependency would not exist anymore. It equates to normalisation standard of 2NF. It enhances quality of data in database.',
        style: TextStyle(fontSize: 20)),

    'Partial Functional Dependency': Text(
        'For X->Y, Y is functionally dependent on X and Y cannot be determined by any proper subset of X. If any attribute of X is removed, then dependency will still exist. 2NF eliminates partial dependency. It does not enhance quality of data in database.',
        style: TextStyle(fontSize: 20)),

    'Closure': Text(
        'It is a mechanism which provides a way to determine all functionally dependencies present in the table. After knowing functionally dependencies, they can be used for normalisation.',
        style: TextStyle(fontSize: 20)),

    'First Normal Form': Text(
        'Relation is First Normal Form if & only if every value in table is atomic (if intersection on a value by taking any one row & one column at a time results in exactly one value in intersected cell.',
        style: TextStyle(fontSize: 20)),

    'Second Normal Form': Text(
        'Relation is called Second Normal Form if:\n1. It is in 1NF\n2. Every non-prime or non-key attribute if fully functional dependent on all key attributes (should not have partial dependency)\n\nFor example: for a table football, there are some key attributes like ground_name which is dependent only on Match_ID & not on player_ID so to achieve 2NF, we divide football table into small tables like footballer(with attributes->player_ID), match(with attributes->match_ID) & statistics.',
        style: TextStyle(fontSize: 20)),

    'Third Normal Form': Text(
        'Relation is called Third Normal Form if:\n1. It is in 2NF\n2. Every non-key attribute of relation is directly dependent on key attributes (does not have transitive dependency)\n3NF eliminates almost all anomalies from the table.',
        style: TextStyle(fontSize: 20)),

    'Boyce Codd Normal Form': Text(
        'It is also callled as 3.5NF. A table is called in BCNF if every determinant is a candidate key. It is based on functional dependencies that take all candidate keys in account. It is a 3NF table which does not have multiple  overlapping candidate keys. A table is called in BCNF if:\n1. Table is in 3NF.\n2. For each functional dependency (X->Y), X should be a super key.',
        style: TextStyle(fontSize: 20)),

    'Fourth Normal Form': Text(
        'For a functional dependency A->B, for a single value of A multiple value of B exists then table may have multivalued dependency. Table should have at least three attributes & B and C should be independent for A->-> B (A multidetermines B) multivalued dependency.\nA relation R is in 4NF, if:\n1. Table is in BCNF.\n2. It should not have any multivalued dependency.',
        style: TextStyle(fontSize: 20)),

    'Fifth Normal Form': Text(
        'Relation R is in fifth normal form or PJNF (Project Join Normal Form) if table is in 4NF & it cannot have a lossless decomposition into any number of smaller tables, means any of the decomposed table is itself the relation R and every decomposed table is a candidate key of R.',
        style: TextStyle(fontSize: 20)),

  };

  Map bulb = {
    'What is DBMS?':'',
    /*'File System vs DBMS',*/
    'Advantages of DBMS':'',
    'Queries in DBMS':'',
    'Query Processor':'',
    'Storage Manager':'',
    'Disk Storage':'',
    'Data Abstraction':'',
    'Data Independence':'',
    'Data Model':'',
    'E-R Model':'',
    'Components of E-R diagram':'',
    'Keys in DBMS':'',
    'Key Constraints':'',
    'Participation Constraints':'',
    'Mapping Constraints':'',
    'Weak and Strong Entities':'',
    'Generalisation':'',
    'Specialisation':'',
    'Aggregation':'',
    'Degree of Relationship Set':'',
    'Entity Sets vs Attributes':'',
    'Entity sets vs Relationship':'',
    'Binary vs n-ary Relationship':'',
    'Relational Algebra':'',
    'Select Operation':'',
    'Project Operation':'',
    'Union Operation':'',
    'Set Intersection Operation':'',
    'Set Difference Operation':'',
    'Cartesian Product':'',
    'Rename Operation':'',
    'Join Operation':'',
    'Division Operation':'',
    'Assignment Operation':'',
    'Generalised Projection':'',
    'Aggregate Function':'',
    'Modification in Database':'',
    'Relational Calculus':'',
    'Tuple Relational Calculus':'',
    'Domain Relational Calculus':'',
    'RC and RA comparison':'',
    'SQL':'',
    'SQL Data Types':'',
    'SQL Commands':'',
    'Data Definition Language':'',
    'Data Manipulation Language':'',
    'Data Control Language':'',
    'Transaction Control Language':'',
    'Data Query Language':'',
    'Arithmetic Expressions':'',
    'Row Selection':'',
    'Comparison Operators':'',
    'Logical Operators':'',
    'Sorting of Results':'',
    'Set Operations':'',
    'Aggregate Functions':'',
    'Single Row Functions':'',
    'Multi-Row Functions':'',
    'Foreign Key':'1. Data type of foreign key column and primary key column must be same.\n2. Referenced table must exist before referencing table referencing it.\n\nA child table entry cannot be done before having its parent entry in its parent table and a parent entry cannot be deleted before deleting its related entries in child table.',
    'Nested Queries':'',
    'Embedded SQL I':'',
    'Embedded SQL II':'1. Each embedded SQL statement begins with an introducer which indicates that it is a SQL statement. For most programming language, EXEC SQL is used as an introducer.\n2. Each embedded SQL statement ends with a terminator.\n3. DECLARE TABLE statement is used to declare a table by specifying columns & data type explicitly.',
    'Dynamic SQL':'',
    'Views':'',
    'Cursors':'',
    'Assertions':'',
    'JDBC and ODBC':'',
    'Active Databases':'',
    'Schema Refinement':'',
    'Introduction':'',
    'Full Functional Dependency':'',
    'Partial Functional Dependency':'',
    'Closure':'',
    'First Normal Form':'',
    'Second Normal Form':'',
    'Third Normal Form':'',
    'Boyce Codd Normal Form':'',
    'Fourth Normal Form':'Table with multivalued dependency creates unnecessary redundancies.',
    'Fifth Normal Form':'',
    'Trigger':''
  };

  Map<String, String> chrome = {
    'What is DBMS?': 'https://www.javatpoint.com/dbms-tutorial',
    'File System vs DBMS': 'https://www.geeksforgeeks.org/difference-between-file-system-and-dbms/',
    'Advantages of DBMS': 'https://www.javatpoint.com/dbms-tutorial',
    'Queries in DBMS': 'https://teachcomputerscience.com/database-queries/',
    'Query Processor': 'https://www.geeksforgeeks.org/structure-of-database-management-system/',
    'Storage Manager': 'https://www.geeksforgeeks.org/structure-of-database-management-system/',
    'Disk Storage': 'https://www.geeksforgeeks.org/structure-of-database-management-system/',
    'Data Abstraction': 'https://www.geeksforgeeks.org/data-abstraction-and-data-independence/',
    'Data Independence': 'https://www.javatpoint.com/dbms-data-independence',
    'Data Model': 'https://www.javatpoint.com/data-models',
    'E-R Model': 'https://www.geeksforgeeks.org/introduction-of-er-model/',
    'Components of E-R diagram': 'https://www.tutorialandexample.com/components-of-an-er-diagram/',
    'Keys in DBMS': 'https://www.upgrad.com/blog/types-of-keys-in-dbms/',
    'Key Constraints': 'https://prepinsta.com/dbms/key-constraints/',
    'Participation Constraints': 'https://prepinsta.com/dbms/participation-constraints/',
    'Mapping Constraints': 'https://www.javatpoint.com/dbms-mapping-constraints',
    'Weak and Strong Entities': 'https://www.geeksforgeeks.org/difference-between-strong-and-weak-entity/',
    'Generalisation': 'https://www.geeksforgeeks.org/generalization-specialization-and-aggregation-in-er-model/',
    'Specialisation': 'https://www.geeksforgeeks.org/generalization-specialization-and-aggregation-in-er-model/',
    'Aggregation': 'https://www.geeksforgeeks.org/generalization-specialization-and-aggregation-in-er-model/',
    'Degree of Relationship Set': 'http://www.myreadingroom.co.in/notes-and-studymaterial/65-dbms/486-degree-of-relationships.html',
    'Entity Sets vs Attributes': 'https://www.javatpoint.com/dbms-er-design-issues',
    'Entity sets vs Relationship': 'https://www.javatpoint.com/dbms-er-design-issues',
    'Binary vs n-ary Relationship': 'https://www.javatpoint.com/dbms-er-design-issues',
    'Relational Algebra': 'https://www.tutorialspoint.com/dbms/relational_algebra.htm',
    'Select Operation': 'https://www.tutorialspoint.com/dbms/relational_algebra.htm',
    'Project Operation': 'https://www.tutorialspoint.com/dbms/relational_algebra.htm',
    'Union Operation': 'https://www.tutorialspoint.com/dbms/relational_algebra.htm',
    'Set Intersection Operation': 'https://www.geeksforgeeks.org/extended-operators-in-relational-algebra/',
    'Set Difference Operation': 'https://www.tutorialspoint.com/dbms/relational_algebra.htm',
    'Cartesian Product': 'https://www.tutorialspoint.com/dbms/relational_algebra.htm',
    'Rename Operation': 'https://www.tutorialspoint.com/dbms/relational_algebra.htm',
    'Join Operation': 'https://www.javatpoint.com/dbms-join-operation#:~:text=Join%20Operations%3A,It%20is%20denoted%20by%20%E2%8B%88.',
    'Division Operation': 'https://www.geeksforgeeks.org/extended-operators-in-relational-algebra/',
    'Assignment Operation': 'https://whatisdbms.com/dbms-relational-algebra/',
    'Generalised Projection': 'https://practice.geeksforgeeks.org/problems/what-is-generalized-projection-operation',
    'Aggregate Function': 'https://www.geeksforgeeks.org/aggregate-functions-in-sql/',
    'Modification in Database': 'http://www.firstsql.com/tutor4.htm',
  'Relational Calculus':'https://www.javatpoint.com/dbms-relational-calculus',
  'Tuple Relational Calculus':'https://www.javatpoint.com/dbms-relational-calculus',
  'Domain Relational Calculus':'https://www.javatpoint.com/dbms-relational-calculus',
  'RC and RA comparison':'https://www.tutorialspoint.com/difference-between-relational-algebra-and-relational-calculus',
    'SQL':'https://www.geeksforgeeks.org/structured-query-language/',
    'SQL Data Types':'https://www.tutorialspoint.com/sql/sql-data-types.htm',
'SQL Commands':'https://www.geeksforgeeks.org/structured-query-language/',
  'Data Definition Language':'https://www.geeksforgeeks.org/sql-ddl-dml-tcl-dcl/',
  'Data Manipulation Language':'https://www.geeksforgeeks.org/sql-ddl-dml-tcl-dcl/',
  'Data Control Language':'https://www.geeksforgeeks.org/sql-ddl-dml-tcl-dcl/',
  'Transaction Control Language':'https://www.geeksforgeeks.org/sql-ddl-dml-tcl-dcl/',
  'Data Query Language':'https://www.geeksforgeeks.org/sql-ddl-dql-dml-dcl-tcl-commands/',
  'Arithmetic Expressions':'https://www.w3resource.com/sql/arithmetic-operators/sql-arithmetic-operators.php',
  'Row Selection':'https://www.ibm.com/docs/en/qmf/11.2?topic=statements-row-selection-sql',
  'Comparison Operators':'https://www.w3schools.com/sql/sql_operators.asp',
  'Logical Operators':'https://www.w3resource.com/sql/boolean-operator/sql-boolean-operators.php',
  'Sorting of Results':'https://www.tutorialspoint.com/sql/sql-sorting-results.htm',
  'Set Operations':'https://www.tutorialspoint.com/set-operations',
  'Aggregate Functions':'https://www.geeksforgeeks.org/aggregate-functions-in-sql/',
    'Single Row Functions':'https://docs.oracle.com/database/121/SQLRF/functions002.htm#SQLRF51179',
    'Multi-Row Functions':'http://www.codefame.in/multiple-row-function-group-function-in-sql/',
  'Foreign Key':'https://www.tutorialspoint.com/sql/sql-foreign-key.htm',
  'Nested Queries':'https://www.geeksforgeeks.org/nested-queries-in-sql/',
  'Embedded SQL I':'https://www.tutorialcup.com/dbms/embedded-sql.htm',
  'Embedded SQL II':'https://www.tutorialcup.com/dbms/embedded-sql.htm',
  'Dynamic SQL':'https://www.geeksforgeeks.org/dynamic-sql/',
  'Views':'https://www.geeksforgeeks.org/sql-views/#:~:text=Views%20in%20SQL%20are%20kind,rows%20based%20on%20certain%20condition.',
  'Cursors':'https://www.geeksforgeeks.org/what-is-cursor-in-sql/',
  'Assertions':'https://www.geeksforgeeks.org/difference-between-assertions-and-triggers-in-dbms/',
  'JDBC and ODBC':'https://www.tutorialspoint.com/what-is-the-difference-between-odbc-and-jdbc',
  'Active Databases':'https://www.geeksforgeeks.org/active-databases/',
    'Schema Refinement':'http://blog.dancrisan.com/intro-to-database-systems-schema-refinement-functional-dependencies',
    'Introduction':'https://www.javatpoint.com/dbms-functional-dependency',
    'Full Functional Dependency':'https://www.tutorialspoint.com/Fully-functional-dependency-in-DBMS',
    'Partial Functional Dependency':'https://www.tutorialspoint.com/Partial-Dependency-in-DBMS',
    'Closure':'https://www.javatpoint.com/dbms-closure-of-an-attribute',
    'First Normal Form':'https://www.tutorialspoint.com/dbms/database_normalization.htm',
    'Second Normal Form':'https://www.tutorialspoint.com/dbms/database_normalization.htm',
    'Third Normal Form':'https://www.tutorialspoint.com/dbms/database_normalization.htm',
    'Boyce Codd Normal Form':'https://www.tutorialspoint.com/dbms/database_normalization.htm',
    'Fourth Normal Form':'https://www.geeksforgeeks.org/introduction-of-4th-and-5th-normal-form-in-dbms/',
    'Fifth Normal Form':'https://www.geeksforgeeks.org/introduction-of-4th-and-5th-normal-form-in-dbms/',
    'Trigger':'https://afteracademy.com/blog/what-is-a-trigger-in-dbms'

  };

  Map<String, String> youtube = {
    'What is DBMS?': 'https://www.youtube.com/watch?v=T7AxM7Vqvaw',
    'File System vs DBMS': 'https://www.youtube.com/watch?v=bjIEw15FKs8',
    'Advantages of DBMS': 'https://www.youtube.com/watch?v=iSBjEcZ1sdM',
    //'Queries in DBMS': 'https://teachcomputerscience.com/database-queries/',
    'Query Processor': 'https://www.youtube.com/watch?v=LlYUPPDK79w',
    'Storage Manager': 'https://www.youtube.com/watch?v=zlXcFbkeuPU',
    'Disk Storage': 'https://www.youtube.com/watch?v=LlYUPPDK79w',
    'Data Abstraction': 'https://www.youtube.com/watch?v=2ie8fvgIsOU',
    'Data Independence': 'https://www.youtube.com/watch?v=zGBIAOYX9Uk',
    'Data Model': 'https://www.youtube.com/watch?v=b-D1D35R4io',
    'E-R Model': 'https://www.youtube.com/watch?v=gbVev8RuZLg',
    'Components of E-R diagram': 'https://www.youtube.com/watch?v=kMJR5gexfs8',
    'Keys in DBMS': 'https://www.youtube.com/watch?v=p3yJZH8_bsc',
    'Key Constraints': 'https://www.youtube.com/watch?v=PcMr6xoundk',
    'Participation Constraints': 'https://www.youtube.com/watch?v=TX2fhj8Xrj8',
    'Mapping Constraints': 'https://www.youtube.com/watch?v=TX2fhj8Xrj8',
    'Weak and Strong Entities': 'https://www.youtube.com/watch?v=ZV5xnTaLLgM',
    'Generalisation': 'https://www.youtube.com/watch?v=4_vsGgy9cGs',
    'Specialisation': 'https://www.youtube.com/watch?v=4_vsGgy9cGs',
    'Aggregation': 'https://www.youtube.com/watch?v=H2AGn0QHcSI',
    'Degree of Relationship Set': 'https://www.youtube.com/watch?v=JGOvqCFrldU',
    'Entity Sets vs Attributes': 'https://www.youtube.com/watch?v=EU3f4osMmWA',
    'Entity sets vs Relationship': 'https://www.youtube.com/watch?v=EU3f4osMmWA',
    'Binary vs n-ary Relationship': 'https://www.youtube.com/watch?v=EU3f4osMmWA',
    'Relational Algebra': 'https://www.youtube.com/watch?v=4YilEjkNPrQ',
    'Select Operation': 'https://www.youtube.com/watch?v=2hUVf17DHVs',
    'Project Operation': 'https://www.youtube.com/watch?v=G9ixeTIyg8s',
    'Union Operation': 'https://www.youtube.com/watch?v=b0zitqncxP8',
    'Set Intersection Operation': 'https://www.youtube.com/watch?v=23YxoY3erH0',
    'Set Difference Operation': 'https://www.youtube.com/watch?v=evDqDiJpw5k',
    'Cartesian Product': 'https://www.youtube.com/watch?v=F6MBz_h3Uj8',
    'Rename Operation': 'https://www.youtube.com/watch?v=AiHBCgZnnpk',
    'Join Operation': 'https://www.youtube.com/watch?v=zYH-e6tUYbw',
    'Division Operation': 'https://www.geeksforgeeks.org/extended-operators-in-relational-algebra/',
    'Assignment Operation': 'https://whatisdbms.com/dbms-relational-algebra/',
    'Generalised Projection': 'https://practice.geeksforgeeks.org/problems/what-is-generalized-projection-operation',
    'Aggregate Function': 'https://www.geeksforgeeks.org/aggregate-functions-in-sql/',
    'Modification in Database': 'http://www.firstsql.com/tutor4.htm',
    'Relational Calculus':'https://www.javatpoint.com/dbms-relational-calculus',
    'Tuple Relational Calculus':'https://www.javatpoint.com/dbms-relational-calculus',
    'Domain Relational Calculus':'https://www.javatpoint.com/dbms-relational-calculus',
    'RC and RA comparison':'https://www.tutorialspoint.com/difference-between-relational-algebra-and-relational-calculus',
    'SQL':'https://www.geeksforgeeks.org/structured-query-language/',
    'SQL Data Types':'https://www.tutorialspoint.com/sql/sql-data-types.htm',
    'SQL Commands':'https://www.geeksforgeeks.org/structured-query-language/',
    'Data Definition Language':'https://www.geeksforgeeks.org/sql-ddl-dml-tcl-dcl/',
    'Data Manipulation Language':'https://www.geeksforgeeks.org/sql-ddl-dml-tcl-dcl/',
    'Data Control Language':'https://www.geeksforgeeks.org/sql-ddl-dml-tcl-dcl/',
    'Transaction Control Language':'https://www.geeksforgeeks.org/sql-ddl-dml-tcl-dcl/',
    'Data Query Language':'https://www.geeksforgeeks.org/sql-ddl-dql-dml-dcl-tcl-commands/',
    'Arithmetic Expressions':'https://www.w3resource.com/sql/arithmetic-operators/sql-arithmetic-operators.php',
    'Row Selection':'https://www.ibm.com/docs/en/qmf/11.2?topic=statements-row-selection-sql',
    'Comparison Operators':'https://www.w3schools.com/sql/sql_operators.asp',
    'Logical Operators':'https://www.w3resource.com/sql/boolean-operator/sql-boolean-operators.php',
    'Sorting of Results':'https://www.tutorialspoint.com/sql/sql-sorting-results.htm',
    'Set Operations':'https://www.tutorialspoint.com/set-operations',
    'Aggregate Functions':'https://www.geeksforgeeks.org/aggregate-functions-in-sql/',
    'Single Row Functions':'https://docs.oracle.com/database/121/SQLRF/functions002.htm#SQLRF51179',
    'Multi-Row Functions':'http://www.codefame.in/multiple-row-function-group-function-in-sql/',
    'Foreign Key':'https://www.tutorialspoint.com/sql/sql-foreign-key.htm',
    'Nested Queries':'https://www.geeksforgeeks.org/nested-queries-in-sql/',
    'Embedded SQL I':'https://www.tutorialcup.com/dbms/embedded-sql.htm',
    'Embedded SQL II':'https://www.tutorialcup.com/dbms/embedded-sql.htm',
    'Dynamic SQL':'https://www.geeksforgeeks.org/dynamic-sql/',
    'Views':'https://www.geeksforgeeks.org/sql-views/#:~:text=Views%20in%20SQL%20are%20kind,rows%20based%20on%20certain%20condition.',
    'Cursors':'https://www.geeksforgeeks.org/what-is-cursor-in-sql/',
    'Assertions':'https://www.geeksforgeeks.org/difference-between-assertions-and-triggers-in-dbms/',
    'JDBC and ODBC':'https://www.tutorialspoint.com/what-is-the-difference-between-odbc-and-jdbc',
    'Active Databases':'https://www.geeksforgeeks.org/active-databases/',
    'Schema Refinement':'http://blog.dancrisan.com/intro-to-database-systems-schema-refinement-functional-dependencies',
    'Introduction':'https://www.javatpoint.com/dbms-functional-dependency',
    'Full Functional Dependency':'https://www.tutorialspoint.com/Fully-functional-dependency-in-DBMS',
    'Partial Functional Dependency':'https://www.tutorialspoint.com/Partial-Dependency-in-DBMS',
    'Closure':'https://www.javatpoint.com/dbms-closure-of-an-attribute',
    'First Normal Form':'https://www.youtube.com/watch?v=g2yF2gyaN7I&list=PLdo5W4Nhv31b33kF46f9aFjoJPOkdlsRc&index=10',
    'Second Normal Form':'https://www.youtube.com/watch?v=O16btnzfuYU&list=PLdo5W4Nhv31b33kF46f9aFjoJPOkdlsRc&index=11',
    'Third Normal Form':'https://www.youtube.com/watch?v=R2Z-DgZ6QFQ&list=PLdo5W4Nhv31b33kF46f9aFjoJPOkdlsRc&index=12',
    'Boyce Codd Normal Form':'https://www.youtube.com/watch?v=nSnaGLtwgMc&list=PLdo5W4Nhv31b33kF46f9aFjoJPOkdlsRc&index=13',
    'Fourth Normal Form':'https://www.geeksforgeeks.org/introduction-of-4th-and-5th-normal-form-in-dbms/',
    'Fifth Normal Form':'https://www.geeksforgeeks.org/introduction-of-4th-and-5th-normal-form-in-dbms/',
    'Trigger':'https://afteracademy.com/blog/what-is-a-trigger-in-dbms'

  };

  List topics=['What is DBMS?',/*'File System vs DBMS',*/'Advantages of DBMS','Queries in DBMS','Query Processor','Storage Manager','Disk Storage','Data Abstraction','Data Independence','Data Model','E-R Model',
    'Components of E-R diagram','Keys in DBMS','Key Constraints','Participation Constraints','Mapping Constraints','Weak and Strong Entities','Generalisation','Specialisation','Aggregation','Degree of Relationship Set','Entity Sets vs Attributes','Entity sets vs Relationship','Binary vs n-ary Relationship',
  'Relational Algebra','Select Operation','Project Operation','Union Operation','Set Intersection Operation','Set Difference Operation','Cartesian Product','Rename Operation','Join Operation','Division Operation','Assignment Operation','Generalised Projection','Aggregate Function','Modification in Database',
  'Relational Calculus','Tuple Relational Calculus','Domain Relational Calculus','RC and RA comparison','SQL','SQL Data Types','SQL Commands','Data Definition Language','Data Manipulation Language','Data Control Language','Transaction Control Language','Data Query Language','Arithmetic Expressions','Row Selection',
  'Comparison Operators','Logical Operators','Sorting of Results','Set Operations','Aggregate Functions','Single Row Functions','Multi-Row Functions','Foreign Key','Nested Queries','Embedded SQL I','Embedded SQL II','Dynamic SQL','Views','Cursors','Assertions','JDBC and ODBC','Active Databases',
    'Schema Refinement','Introduction','Full Functional Dependency','Partial Functional Dependency','Closure','First Normal Form','Second Normal Form','Third Normal Form','Boyce Codd Normal Form','Fourth Normal Form','Fifth Normal Form','Trigger'];

}